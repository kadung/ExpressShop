Ref:
    1. https://mongoosejs.com/docs/queries.html
    2. https://mongoosejs.com/docs/schematypes.html
    3. https://mongoosejs.com/docs/validation.html

---------------------------------------------------------------------------------------
    Overview
---------------------------------------------------------------------------------------
- Express apps can use any database supported by Node. There are many popular options, 
including PostgreSQL, MySQL, Redis, SQLite, and MongoDB.

- There are two approaches for interacting with a database: 
    + Using the databases' native query language (e.g. SQL)
    + Using an Object Data Model ("ODM") / Object Relational Model ("ORM"). An ODM/ORM
    represents the website's data as JavaScript objects, which are then mapped to the 
    underlying database. Some ORMs are tied to specific database, while others provide
    a database-agnostic backend.

- ODM's are often slower because they use translation code to map between objects and
the database format, which may not use the most efficient database queries. 

- Using ODM/ORMs often results in lower costs for development and maintenance! Unless 
you're very familiar with the native query language or performance is paramount.

- One of the famous ODM for node is mongoose. It acts as a front end to MongoDB (an 
NoSQL database) that uses document-oriented data model. A “collection” of “documents”,
in a MongoDB database, is analogous to a “table” of “rows” in a relational database.

---------------------------------------------------------------------------------------
    Mongoose models
---------------------------------------------------------------------------------------
- Models are defined by using the Schema interface with mongoose.model() method. The 
Schema allows to define the fields stored in each document along with their validation 
requirements and default values. Once you have a model you can use it to find, create,
update, and delete objects of the given type.

- The following are all the valid SchemaTypes in Mongoose: String, Number, Date, Buffer
,Boolean, Mixed, ObjectId, Array, Decimal128, Map

- Example for a schema:
    // Require Mongoose
    var mongoose = require('mongoose');

    // Define a schema
    var Schema = mongoose.Schema;

    // Defining the types of fields inside the constructor's object parameter
    var SomeModelSchema = new Schema({
        a_string: String,
        a_date: Date
    });

- Example for creating a model:
    // First argument is the singular name of the collection which Mongoose creates
    // or maps to the plural, lowercased collection name in the mongo database.
    // Second argument is the schema that you want to use in creating the model
    var SomeModel = mongoose.model('SomeModel', SomeModelSchema );

- It is highly recommend defining each model schema in its own module (file), exporting
the method to create the model.
    // File: ./models/somemodel.js
    var mongoose = require('mongoose');
    var Schema = mongoose.Schema;
    var SomeModelSchema = new Schema({
        a_string: String,
        a_date: Date,
    });
    module.exports = mongoose.model('SomeModel', SomeModelSchema );

So you can then require and use the model immediately in other files.
    //Create a SomeModel model just by requiring the module
    var SomeModel = require('../models/somemodel')

    // Use the SomeModel object (model) to find all SomeModel records
    SomeModel.find(callback_function);


---------------------------------------------------------------------------------------
    Schema Validation
---------------------------------------------------------------------------------------
- Mongoose provides built-in and custom validators which allows you to specify both the
acceptable range or values and the error message for validation failure in all cases.

- The built-in validators include:
    + All SchemaTypes have the built-in required validator. This is used to specify 
    whether the field must be supplied in order to save a document.
    + Numbers have min and max validators.
    + Strings have:
        . enum: specifies the set of allowed values for the field.
        . match: specifies a regular expression that the string must match.
        . maxlength and minlength for the string.

- Example:
    var breakfastSchema = new Schema({
        eggs: {
            type: Number,
            min: [6, 'Too few eggs'],
            max: 12,
            required: [true, 'Why no eggs?']
        },
        drink: {
            type: String,
            enum: ['Coffee', 'Tea', 'Water',]
        }
    });


---------------------------------------------------------------------------------------
    Virtual properties
---------------------------------------------------------------------------------------
- Virtual properties are document properties that you can get and set but that do not 
get persisted to MongoDB.

- The getters are useful for formatting or combining fields, while setters are useful
for de-composing a single value into multiple values for storage

- Example:
    var AuthorSchema = new Schema(
        {
            first_name: {type: String, required: true, max: 100},
            family_name: {type: String, required: true, max: 100},
            date_of_birth: {type: Date},
            date_of_death: {type: Date},
        }
    );

    // Virtual for author's full name
    AuthorSchema
        .virtual('name')
        .get(function () {
            return this.family_name + ', ' + this.first_name;
    });


---------------------------------------------------------------------------------------
    Using models
---------------------------------------------------------------------------------------
- Creating and modifying documents:
    + Define an instance of the model and then call save()
        // Create an instance of model SomeModel
        var awesome_instance = new SomeModel({ name: 'awesome' });

        // Save new model instance, passing a callback when the operation completes
        awesome_instance.save(function (err) {
            if (err) return handleError(err);
            // saved!
        });

    +  Use create method:
        SomeModel.create({ name: 'also_awesome' }, function (err, awesome_instance) {
            if (err) return handleError(err);
            // saved!
        });

- Searching for documents:
    + find(): find all matching records.
    + findById(): finds the document with the specified id (every document has a unique
    id).
    + findOne(): finds a single document that matches the specified criteria.
    + findByIdAndRemove(), findByIdAndUpdate(), findOneAndRemove(), findOneAndUpdate():
    Finds a single document by id or criteria and either update or remove it.
    + Example:
        var Athlete = mongoose.model('Athlete', yourSchema);
        Athlete.
            find().
            where('sport').equals('Tennis').    //Query condition
            where('age').gt(17).lt(50).         //Additional query condition
            limit(5).
            sort({ age: -1 }).
            select('name age').
            exec(callback); // where callback is the name of our callback function.
        
- Documents relationship:
    + Model relationship is created by ObjectId schema field. 
    + The field stores the id of the related model. If you need the actual content 
    of the associated document, you can use the populate() method in a query to 
    replace the id with the actual data.
    + Example:
        ...
        var authorSchema = Schema({
            name    : String,
            // Each author can have multiple stories (One to many relationship)
            stories : [{ type: Schema.Types.ObjectId, ref: 'Story' }]
        });

        var storySchema = Schema({
            // Each story can have a single author (One to one relationship)
            author : { type: Schema.Types.ObjectId, ref: 'Author' },
            title    : String
        });
        ...


