Ref:
    1. https://expressjs.com/en/guide/using-middleware.html

---------------------------------------------------------------------------------------
    Overview
---------------------------------------------------------------------------------------
- Middleware functions are functions that have access to the request object (req), the 
response object (res), and the next() function in the application’s request response 
cycle. The next() function is a function in the Express router which, when invoked, 
executes the middleware succeeding the current middleware.

- Middleware functions can perform the following tasks:
    + Execute the code in middleware function everytime the app receives a request.
    + Make changes to the request and the response objects.
    + End the request-response cycle
    + Call the next middleware in the stack.

- If the current middleware function does not end the request-response cycle, it must 
call next() to pass control to the next middleware function. Otherwise, the request 
will be left hanging.

- The order of middleware loading is important: middleware functions that are loaded 
first are also executed first.

- An Express application can use the following types of middleware:
    + Application-level middleware
    + Router-level middleware
    + Error-handling middleware
    + Built-in middleware
    + Third-party middleware


---------------------------------------------------------------------------------------
    Application-level middleware
---------------------------------------------------------------------------------------
- Application level middleware is binded to an instance of the app object (the Express 
application) by using the app.use() or app.METHOD() functions.

- For example:
    // Create Express instance:
    var express = require('express');
       var app = express();

    // Declare middleware functions:
    function middleware1 (req, res, next) {
        console.log('Time:', Date.now())
        next()
    }

    function middleware2 (req, res, next) {
        console.log('Request Type:', req.method)
        next()
    }

    var midfuncs = [middleware1, middleware2]

    // Use middleware function with no mount path so it is executed every time the app 
    // receives any request:
    app.use(middleware1)

    // Use middleware function mounted on /user/:id path and it is executed for any
    // type of HTTP request to the /user/:id path:
    app.use('/user/:id', middleware1)

    // Use multiple middleware functions mounted on /user/:id path and it is excuted 
    // with order that function loaded first is also executed first.
    app.use('/user/:id', middleware1, middleware2)
    
    // Or:
    app.use('/user/:id', midfuncs, function (req, res, next) {
        res.send('User Info')
    })
    
    // Use middleware function mounted on /user/:id path with specific request type:
    app.get('/user/:id', function (req, res, next) {
        res.send('USER')
    })

---------------------------------------------------------------------------------------
    Router-level middleware
---------------------------------------------------------------------------------------
- Router-level middleware works in the same way as application-level middleware, except 
it is bound to an instance of express.Router().

- See Routing.txt for details.

---------------------------------------------------------------------------------------
    Error-handling middleware
---------------------------------------------------------------------------------------
- Define error-handling middleware functions in same way as other middleware, except
with four arguments instead of three, specifically with the signature (err, req, res, 
next).

- Even if you don’t need to use the next object, you must specify it to maintain the 
signature. Otherwise, the next object will be interpreted as regular middleware and 
will fail to handle errors.

- See error handle.txt for details.


---------------------------------------------------------------------------------------
    Built-in middleware
---------------------------------------------------------------------------------------
- Express has the following built-in middleware functions:
    + express.static serves static assets such as HTML files, images, and so on.

    + express.json parses incoming requests with JSON payloads. 
    NOTE: Available with Express 4.16.0+

    + express.urlencoded parses incoming requests with URL-encoded payloads. 
    NOTE: Available with Express 4.16.0+


---------------------------------------------------------------------------------------
    Third-party middleware
---------------------------------------------------------------------------------------
- Use third-party middleware to add functionality to Express apps. Install the Node.js 
module for the required functionality, then load it in your app at the application 
level or at the router level.

- For a partial list of third-party middleware functions that are commonly used with 
Express, see: https://expressjs.com/en/resources/middleware.html
